@model List<KazanlakRun.Web.Areas.Admin.Models.AidStationGoodsReportViewModel>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Goods Consumption by Aid Station";
}
<style>
    @@media print {
        .no-print {
            display: none !important;
        }

        table {
            page-break-after: auto;
        }

        tr, td {
            page-break-inside: avoid;
            page-break-after: auto;
        }
    }
</style>

<h1>📊 Planned consumption at Aid stations</h1>

<div class="no-print mb-3 d-flex align-items-center">
    <!-- Left: filter input -->
    <div class="me-3">
        <label for="filterInput" class="form-label mb-0">Filter Goods:</label>
        <input id="filterInput"
               type="text"
               class="form-control"
               placeholder="Type to filter by good name..." />
    </div>

    <!-- Center: pagination controls -->
    <div class="flex-fill d-flex justify-content-center">
        <button id="firstBtn" class="btn btn-sm btn-outline-primary me-2">« First</button>
        <button id="prevBtn" class="btn btn-sm btn-outline-primary me-2">‹ Prev</button>
        <span id="pageInfo" class="mx-2 align-self-center"></span>
        <button id="nextBtn" class="btn btn-sm btn-outline-primary ms-2">Next ›</button>
        <button id="lastBtn" class="btn btn-sm btn-outline-primary ms-2">Last »</button>
    </div>

    <!-- Right: print button -->
    <button class="btn btn-secondary ms-3" onclick="window.print()">🖨️ Print</button>
</div>

<div id="stationsContainer">
    @foreach (var station in Model)
    {
        <div class="station-block">
            <h2 class="mt-4">
                @station.AidStationName
                <small class="text-muted">(Total runners: @station.TotalRegisteredRunners)</small>
            </h2>
            <table class="table table-bordered table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>Name</th>
                        <th>Measure</th>
                        <th class="text-end">Qty per Station</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var g in station.Goods)
                    {
                        <tr>
                            <td>@g.Name</td>
                            <td>@g.Measure</td>
                            <td class="text-end">@g.QuantityPerAidStation</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var input = document.getElementById('filterInput');
            var container = document.getElementById('stationsContainer');
            var blocks = Array.from(container.querySelectorAll('.station-block'));
            var firstBtn = document.getElementById('firstBtn');
            var prevBtn = document.getElementById('prevBtn');
            var nextBtn = document.getElementById('nextBtn');
            var lastBtn = document.getElementById('lastBtn');
            var pageInfo = document.getElementById('pageInfo');
            var current = 0;

            function renderPage() {
                blocks.forEach((b, i) => {
                    b.style.display = (i === current) ? '' : 'none';
                });
                pageInfo.textContent = (current + 1) + ' / ' + blocks.length;
                firstBtn.disabled = (current === 0);
                prevBtn.disabled = (current === 0);
                nextBtn.disabled = (current === blocks.length - 1);
                lastBtn.disabled = (current === blocks.length - 1);
            }

            function filterGoods(e) {
                if (e && e.key === 'Enter') e.preventDefault();
                var filter = input.value.trim().toLowerCase();

                blocks.forEach(function (block) {
                    var rows = block.querySelectorAll('tbody tr');
                    var anyVisible = false;
                    rows.forEach(function (row) {
                        var text = row.cells[0].textContent.trim().toLowerCase();
                        if (text.includes(filter)) {
                            row.style.display = '';
                            anyVisible = true;
                        } else {
                            row.style.display = 'none';
                        }
                    });
                    block.style.display = anyVisible ? '' : 'none';
                });

                // after filtering, reset pagination indices to first visible block
                blocks.forEach((b, i) => {
                    if (b.style.display === '') {
                        current = i;
                        return false;
                    }
                });
                renderPage();
            }

            // pagination handlers
            firstBtn.addEventListener('click', () => { current = 0; renderPage(); });
            prevBtn.addEventListener('click', () => { current--; renderPage(); });
            nextBtn.addEventListener('click', () => { current++; renderPage(); });
            lastBtn.addEventListener('click', () => { current = blocks.length - 1; renderPage(); });

            // wire up filter and initialize
            input.addEventListener('input', filterGoods);
            input.addEventListener('keydown', filterGoods);
            renderPage();
        });
    </script>
}
