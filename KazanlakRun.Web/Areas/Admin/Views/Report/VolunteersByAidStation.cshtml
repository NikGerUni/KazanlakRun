@model List<KazanlakRun.Web.Areas.Admin.Models.AidStationVolunteersReportViewModel>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Volunteers by Aid Station Report";
}

<style>
    @@media print {
        .no-print {
            display: none !important;
        }

        table {
            page-break-after: auto;
        }

        tr {
            page-break-inside: avoid;
            page-break-after: auto;
        }

        td {
            page-break-inside: avoid;
            page-break-after: auto;
        }
    }
</style>

<h1>📋 Volunteers per Aid Station</h1>

@* <div class="no-print mb-3 d-flex align-items-center">
    <!-- Filter across all visible fields -->
    <div class="me-3">
        <label for="filterInput" class="form-label mb-0">Filter Volunteers:</label>
        <input id="filterInput"
               type="text"
               class="form-control"
               placeholder="Type to filter any column..." />
    </div>

    <!-- Pagination controls -->
    <button id="firstBtn" class="btn btn-sm btn-outline-primary me-2">« First</button>
    <button id="prevBtn" class="btn btn-sm btn-outline-primary me-2">‹ Prev</button>
    <span id="pageInfo" class="mx-2"></span>
    <button id="nextBtn" class="btn btn-sm btn-outline-primary ms-2">Next ›</button>
    <button id="lastBtn" class="btn btn-sm btn-outline-primary ms-2">Last »</button>

    <button class="btn btn-secondary ms-auto" onclick="window.print()">🖨️ Print</button>
</div> *@

<div class="no-print mb-3 d-flex align-items-center">
    <!-- Ляво: филтър -->
    <div class="me-3">
        <label for="filterInput" class="form-label mb-0">Filter Volunteers:</label>
        <input id="filterInput"
               type="text"
               class="form-control"
               placeholder="Type to filter any column..." />
    </div>

    <!-- Център: пагинация, центрирана -->
    <div class="flex-fill d-flex justify-content-center">
        <button id="firstBtn" class="btn btn-sm btn-outline-primary me-2">« First</button>
        <button id="prevBtn" class="btn btn-sm btn-outline-primary me-2">‹ Prev</button>
        <span id="pageInfo" class="mx-2 align-self-center"></span>
        <button id="nextBtn" class="btn btn-sm btn-outline-primary ms-2">Next ›</button>
        <button id="lastBtn" class="btn btn-sm btn-outline-primary ms-2">Last »</button>
    </div>

    <!-- Дясно: Print -->
    <button class="btn btn-secondary ms-3" onclick="window.print()">🖨️ Print</button>
</div>

<div id="stationsContainer">
    @foreach (var station in Model)
    {
        <div class="station-block">
            <h2 class="mt-4">@station.AidStationName</h2>
            <table class="table table-bordered table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>Names</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Roles</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var v in station.Volunteers)
                    {
                        <tr>
                            <td>@v.Names</td>
                            <td>@v.Email</td>
                            <td>@v.Phone</td>
                            <td>@string.Join(", ", v.Roles)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const blocks = Array.from(document.querySelectorAll('.station-block'));
            const firstBtn = document.getElementById('firstBtn');
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const lastBtn = document.getElementById('lastBtn');
            const pageInfo = document.getElementById('pageInfo');
            const filterInput = document.getElementById('filterInput');
            let current = 0;

            function renderPage() {
                blocks.forEach((b, i) => b.style.display = i === current ? '' : 'none');
                pageInfo.textContent = `${current + 1} / ${blocks.length}`;
                firstBtn.disabled = current === 0;
                prevBtn.disabled = current === 0;
                nextBtn.disabled = current === blocks.length - 1;
                lastBtn.disabled = current === blocks.length - 1;
            }

            function filterVolunteers() {
                const filter = filterInput.value.trim().toLowerCase();
                // For each station-block, filter its rows
                blocks.forEach(block => {
                    const rows = Array.from(block.querySelectorAll('tbody tr'));
                    let anyVisible = false;
                    rows.forEach(row => {
                        // Check all cells in row
                        const cells = Array.from(row.cells);
                        const matches = cells.some(cell =>
                            cell.textContent.trim().toLowerCase().includes(filter)
                        );
                        row.style.display = matches ? '' : 'none';
                        if (matches) anyVisible = true;
                    });
                    // Show or hide the entire station based on any matching row
                    block.style.display = anyVisible ? '' : 'none';
                });
                // After filtering, if current block is hidden, jump to first visible
                const visibleIdx = blocks.findIndex(b => b.style.display === '');
                if (visibleIdx >= 0) current = visibleIdx;
                renderPage();
            }

            // Pagination handlers
            firstBtn.addEventListener('click', () => { current = 0; renderPage(); });
            prevBtn.addEventListener('click', () => { if (current > 0) current--; renderPage(); });
            nextBtn.addEventListener('click', () => { if (current < blocks.length - 1) current++; renderPage(); });
            lastBtn.addEventListener('click', () => { current = blocks.length - 1; renderPage(); });

            // Wire up filter to input events
            ['input', 'keyup', 'change'].forEach(evt =>
                filterInput.addEventListener(evt, filterVolunteers)
            );

            // Initialize
            renderPage();
        });
    </script>
}
